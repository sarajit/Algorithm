/**
 * Ice Cream Parlor
 *
 * Each time Sunny and Johnny take a trip to the Ice Cream Parlor, they pool together m dollars for ice cream.
 * On any given day, the parlor offers a line of n flavors. Each flavor, i, is numbered sequentially with a unique
 * ID number from 1 to n and has a cost, ci, associated with it.
 *
 * Given the value of m and the cost of each flavor for t trips to the Ice Cream Parlor, help Sunny and Johnny choose
 * two flavors such that they spend their entire pool of money (m) during each visit. For each trip to the parlor,
 * print the ID numbers for the two types of ice cream that Sunny and Johnny purchase as two space-separated integers
 * on a new line. You must print the smaller ID first and the larger ID second.
 *
 * Example :
 *          4
 *          1 4 5 3 2
 * Output : 1 4
 *          The first time, they pool together m = 4 dollars.
 *          There are five flavors available that day and flavors 1 and 4 have a total cost of 1 + 3 = 4.
 *          Thus, we print 1 4 on a new line.
 *
 *          4
 *          2 2 4 3
 * Output : 1 2
 *          The second time, they pool together m = 4 dollars.
 *          There are four flavors available that day and flavors 1 and 2 have a total cost of 2 + 2 = 4.
 *          Thus, we print 1 2 on a new line.
 *
 * Created by sarajit *
 */
import java.util.*;


public class IceCreamParlor  {

    
	
	public static int[] _findPair (int[] input, int sum) {
        Map<Integer, Integer> elementRef = new HashMap<>();

        int[] res = new int[2];
        for (int idx = 0; idx < input.length; idx ++) {
            
			//System.out.println("elementRef"+ elementRef);
			if (elementRef.containsKey(sum - input[idx])) {
                System.out.println(" if elementRef"+ elementRef);
				System.out.println(" if idx"+ idx);
				System.out.println(" if input[idx]"+ input[idx]);
				System.out.println(" if sum - input[idx]"+ (sum - input[idx]));
				
				res[0] = Math.min(idx+1 , elementRef.get(sum - input[idx]));
                res[1] = Math.max(idx+1, elementRef.get(sum - input[idx]));
                break;
            } else {
                elementRef.put(input [idx], idx+1 );
				System.out.println(" else elementRef"+ elementRef);
				System.out.println(" else idx"+ idx);
				System.out.println(" else input[idx]"+ input[idx]);
				System.out.println(" else sum - input[idx]"+ (sum - input[idx]));

            }
        }

        return res;
    }
	
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner (System.in);

		//get no of trips
		//get details for each trip
		//get no of $ is being to spent at each trip
		//get no of flabour available at each trip 
		//get cost of each flabour
		//find the cost 2 flavour = m 
		//print the the position of the flavour
		//O(n square)
		int t = sc.nextInt();
		
		long start =  System.nanoTime();
		while (t>0){

			int d = sc.nextInt();
			int f = sc.nextInt();
			int [] cost = new int [f];

			
			for(int i =0; i< f ; i++){
				
				cost[i] = sc.nextInt();
			System.out.println(cost[i]);
			
			}

			int res [] = _findPair(cost,d);

			System.out.println("result"+ Arrays.toString(res));


			for(int j=0;j<f;j++){
				for(int k=j+1;k<f;k++){
					if(cost[j] +cost[k] == d)
						System.out.println("--------------->"+cost[j]+ "" +cost[k]);
				
				}
			}
			
			t--;
		}

		long end = System.nanoTime();
		long diff = end-start;
		long diffInMillis = diff/1000000;
		System.out.println("Total time taken"+diffInMillis+ "ms" );

    }
 
}
